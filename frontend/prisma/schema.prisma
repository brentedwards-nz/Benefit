generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Client {
  id          String     @id
  firstName   String?
  lastName    String?
  birthDate   DateTime?  @db.Date
  current     Boolean    @default(false)
  disabled    Boolean    @default(true)
  avatarUrl   String?
  contactInfo Json?
  createdAt   DateTime?  @db.Timestamp(6)
  updatedAt   DateTime?  @db.Timestamp(6)
  roles       UserRole[] @default([Client])
  authId      String     @unique(map: "client_auth_id_unique")
}

model Programme {
  id                  String    @id @default(cuid())
  programmeTemplateId String
  humanReadableId     String    @unique
  name                String
  startDate           DateTime
  maxClients          Int
  numberOfSessions    Int
  programmeCost       Decimal   @db.Decimal(10, 2)
  notes               String?
  adhocData           Json?
  createdAt           DateTime? @default(now()) @db.Timestamp(6)
  updatedAt           DateTime? @default(now()) @db.Timestamp(6)

  // Relation to ProgrammeEnrolment
  enrolments        ProgrammeEnrolment[]
  ProgrammeTemplate ProgrammeTemplate?   @relation(fields: [programmeTemplateId], references: [id])
}

model ProgrammeTemplate {
  id               String   @id @default(cuid())
  name             String   @unique
  startDate        DateTime
  maxClients       Int
  numberOfSessions Int
  programmeCost    Decimal  @db.Decimal(10, 2)
  notes            String?
  adhocData        Json?

  programmes         Programme[]
  ProgrammeEnrolment ProgrammeEnrolment[]
}

model ProgrammeEnrolment {
  id        String    @id @default(cuid())
  programId String
  clientId  String
  notes     String?
  adhocData Json?
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  updatedAt DateTime? @default(now()) @db.Timestamp(6)

  // Relation to Programme with cascade delete
  programme           Programme          @relation(fields: [programId], references: [id], onDelete: Cascade)
  ProgrammeTemplate   ProgrammeTemplate? @relation(fields: [programmeTemplateId], references: [id])
  programmeTemplateId String?
}

model SystemGmailConfig {
  id                    BigInt   @id(map: "system_gmail_config_pkey") @default(autoincrement())
  connectedEmail        String   @unique(map: "system_gmail_config_connected_email_key")
  accessToken           String
  expiresAt             DateTime @db.Timestamptz(6)
  scopes                String
  createdAt             DateTime @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime @default(now()) @db.Timestamptz(6)
  encryptedRefreshToken String?
}

enum UserRole {
  SystemAdmin
  Owner
  Admin
  Client
}
